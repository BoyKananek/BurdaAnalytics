<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <!-- <link rel="icon" type="image/png" href="assets/img/favicon.ico"> -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

  <title>LISAGURU Dashboard</title>
  <script src="ejs.js"></script>
  <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />
    <meta name="viewport" content="width=device-width" />

    <script type="text/javascript" src="https://www.google.com/jsapi"></script> 
    <!-- Bootstrap core CSS     -->
    <link href="/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Animation library for notifications   -->
    <link href="/css/animate.min.css" rel="stylesheet"/>

    <!--  Light Bootstrap Table core CSS    -->
    <link href="/css/light-bootstrap-dashboard.css" rel="stylesheet"/>


    <!--  CSS for Demo Purpose, don't include it in your project     -->
    <link href="/css/demo.css" rel="stylesheet" />


    <!--     Fonts and icons     -->
    <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,700,300' rel='stylesheet' type='text/css'>
    <link href="/css/pe-icon-7-stroke.css" rel="stylesheet" />

<!-- Include the ViewSelector2 component script. -->
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/view-selector2.js"></script>

<!-- Include the DateRangeSelector component script. -->
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/date-range-selector.js"></script>

<!-- Include the ActiveUsers component script. -->
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/active-users.js"></script>

<!-- Include the CSS that styles the charts. -->
<link rel="stylesheet" href="https://ga-dev-tools.appspot.com/public/css/chartjs-visualizations.css">

</head>

<body>

<div class="wrapper">
    <div class="sidebar" data-color="blue" data-image="/img/sidebar-4.jpg">

    <!--

        Tip 1: you can change the color of the sidebar using: data-color="blue | azure | green | orange | red | purple"
        Tip 2: you can also add an image using data-image tag

    -->

      <div class="sidebar-wrapper">
            <div class="logo">
                <a href="#" class="simple-text">
                    DASHBOARD DIGITAL
                </a>
            </div>

            <ul class="nav">
              <li>
                   <a href="/index-lisa">LISAGURU.COM</a>
              </li>
              <li> 
                   <a href="/index-hello">HELLOMAGAZINETHAILAND.COM</a>
              </li> 
            </ul>
      </div>
    </div>

    <div class="main-panel">
        <nav class="navbar navbar-default navbar-fixed">
            <div class="container-fluid">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navigation-example-2">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                </div>
                <div class="collapse navbar-collapse">
                    <ul class="nav navbar-nav navbar-left">
                        <li>
                            <div id="embed-api-auth-container" class="navbar-text"></div>
                        </li>
                        
                    </ul>

                    <ul class="nav navbar-nav navbar-right">
                        <li>
                           <!-- <div id="view-name"></div> 
                            <div id="active-users-container"></div>    -->
                        </li>
                        <li>
                           <a href="#" onclick="signOut();">Sign out</a>
                        </li> 
                    </ul>
                </div>
            </div>
        </nav>

        <div class="content" style="background-color:#FFFFFF;">
          
            <div class="container-fluid">
                  <center><div id="date-range-selector-1-container"></div></center> 
            </div>
                <div class="row">
                  <div class="col-md-6">
                    <h3> Sessions (by date) </h3>
                    <div id="chart-container1"></div>
                  </div>
                  <div class="col-md-6">
                    <h3> Pageview (by date) </h3>
                    <div id="chart-container2"></div>
                  </div>
                </div>
            <div class="row">
              
              <div class="col-md-6">
                <div class="Chartjs">
                <h3>Device (by sessions)</h3>last 30 days
                <figure class="Chartjs-figure" id="chart-container3"></figure>
                <ol class="Chartjs-legend" id="legend-container3"></ol>
                </div>
              </div>
              <div class="col-md-6">
                <div class="Chartjs">
                <h3>New user vs return user (by sessions)</h3>last 30 days
                <figure class="Chartjs-figure" id="chart-container4"></figure>
                <ol class="Chartjs-legend" id="legend-container4"></ol>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <h3> Traffic Sources medium (by sessions)</h3>last 30 days
                <figure class="Chartjs-figure" id="chart-container5"></figure>
                <ol class="Chartjs-legend" id="legend-container5"></ol> 
              </div>
              <div class="col-md-6">
                <h3> Top 5 page title(By pageviews) </h3>
                <div id="chart-container6"></div>
              </div>
            </div>
            <div class="row">
         
              <div class="col-md-6">
                <div class="Chartjs">
                    <h3>This week vs Last week</h3>
                    <figure class="Chartjs-figure" id="chart-1-container"></figure>
                    <ol class="Chartjs-legend" id="legend-1-container"></ol> 
                  </div>
              </div>
              <div class="col-md-6">
                <div class="Chartjs">
                  <h3>This Month vs Last Month (by users)</h3>
                  <figure class="Chartjs-figure" id="chart-2-container"></figure>
                  <ol class="Chartjs-legend" id="legend-2-container"></ol>
                </div>
              </div>
            </div>
            <div class="row">
              
              <div class="col-md-6">
                <div class="Chartjs">
                  <h3>Top Browsers (by sessions)</h3> last 30 days
                  <figure class="Chartjs-figure" id="chart-3-container"></figure>
                  <ol class="Chartjs-legend" id="legend-3-container"></ol>
                </div>
              </div>
              <div class="col-md-6">
                <div class="Chartjs">
                  <h3>Top Countries (by sessions)</h3> last 30 days
                  <figure class="Chartjs-figure" id="chart-4-container"></figure>
                  <ol class="Chartjs-legend" id="legend-4-container"></ol>
                </div>
              </div>
            </div>
            

        </div>


        <footer class="footer">
            <div class="container-fluid">
                <p class="copyright pull-right">
                    &copy; 2016 Digital Team, made with love for a better web
                </p>
            </div>
        </footer>

    </div>
</div>
</body>
<script>
        (function(w,d,s,g,js,fs){
          g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(f){this.q.push(f);}};
          js=d.createElement(s);fs=d.getElementsByTagName(s)[0];
          js.src='https://apis.google.com/js/platform.js';
          fs.parentNode.insertBefore(js,fs);js.onload=function(){g.load('analytics');};
        }(window,document,'script'));
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js"></script>

<!-- Include the ViewSelector2 component script. -->
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/view-selector2.js"></script>

<!-- Include the DateRangeSelector component script. -->
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/date-range-selector.js"></script>

<!-- Include the ActiveUsers component script. -->
<script src="https://ga-dev-tools.appspot.com/public/javascript/embed-api/components/active-users.js"></script>

<!-- Include the CSS that styles the charts. -->
<link rel="stylesheet" href="https://ga-dev-tools.appspot.com/public/css/chartjs-visualizations.css">
<script>
  // signout function and redirect to login page
  var viewID = 'ga:126985844'
    function signOut() {
      var auth2 = gapi.auth2.getAuthInstance();
      auth2.signOut().then(function () {
        window.location.assign("/");
      });
    }
  
  gapi.analytics.ready(function() {
      /**
       * Authorize the user immediately if the user has already granted access.
       * If no access has been created, render an authorize button inside the
       * element with the ID "embed-api-auth-container".
       */
      // authorize by google analytics
      gapi.analytics.auth.authorize({
        container: 'embed-api-auth-container',
        clientid: '532462454691-svtj54st9puu03q57j8fh34i32e08o99.apps.googleusercontent.com'
      });
     
  /**
   * Create a new ActiveUsers instance to be rendered inside of an
   * element with the id "active-users-container" and poll for changes every
   * five seconds.
   */
 /* var activeUsers = new gapi.analytics.ext.ActiveUsers({
    container: 'active-users-container',
    pollingInterval: 5
  });*/


  /**
   * Add CSS animation to visually show the when users come and go.
   */

  /*activeUsers.once('success', function() {
    var element = this.container.firstChild;
    var timeout;

    this.on('change', function(data) {
      var element = this.container.firstChild;
      var animationClass = data.delta > 0 ? 'is-increasing' : 'is-decreasing';
      element.className += (' ' + animationClass);

      clearTimeout(timeout);
      timeout = setTimeout(function() {
        element.className =
            element.className.replace(/ is-(increasing|decreasing)/g, '');
      }, 3000);
    });
  }).execute(); */


  /**
   * Create a new ViewSelector2 instance to be rendered inside of an
   * element with the id "view-selector-container".
   */
  /*var viewSelector = new gapi.analytics.ext.ViewSelector2({
    container: 'view-selector-container',
  })
  .execute();*/

  var dateRange1 = {
    'start-date': '30daysAgo',
    'end-date': 'yesterday'
  };
  var dateRangeSelector1 = new gapi.analytics.ext.DateRangeSelector({
    container: 'date-range-selector-1-container'
  })
  .set(dateRange1)
  .execute();

  var data1 = {
      query: {
        'ids' :viewID, 
        'metrics': 'ga:sessions',
        'dimensions': 'ga:date',
        
      },
      chart: {
        container: 'chart-container1',
        type: 'LINE',
        options: {
          width: '100%'
        }
      }
  }
  
  var data2 = {
    query:{
      'ids' :viewID, 
      'metrics': 'ga:pageviews',
      'dimensions':'ga:date',
     
    },
    chart:{

      container:'chart-container2',
      type:'LINE',
      options:{
        width:'100%'
      }
    }
  }

  var data4 = {
    query:{
        'ids' :viewID, 
        'metrics':'ga:pageviews',
        'dimensions': 'ga:pageTitle',
        'sort':'-ga:pageviews',
        'max-results': '5'
    },
    chart:{
        container:'chart-container6',
        type:'TABLE',
        options:{
            width:'100%'
        }
    }
  }
  var dataChart1 = new gapi.analytics.googleCharts.DataChart(data1)
      .set({query: dateRange1})
      .set({chart: {container: 'chart-container1'}});
  var dataChart2 = new gapi.analytics.googleCharts.DataChart(data2)
      .set({query: dateRange1})
      .set({chart: {container: 'chart-container2'}});
  var dataChart4 = new gapi.analytics.googleCharts.DataChart(data4)
      .set({query: dateRange1})
      .set({chart: {container: 'chart-container6'}});
       
  /**
   * Update the activeUsers component, the Chartjs charts, and the dashboard
   * title whenever the user changes the view.
   */
  /*viewSelector.on('viewChange', function(data) {
    var title = document.getElementById('view-name');
    title.innerHTML = data.property.name + ' (' + data.view.name + ')';

    // Start tracking active users for this view.
    activeUsers.set(data).execute();
    //render chart 
    dataChart1.set({query: data}).execute();
    dataChart2.set({query: data}).execute();
    dataChart4.set({query: data}).execute();

    // Render all the of charts for this view.
    renderSessionSource(data.ids);
    renderDeviceSession(data.ids);
    renderNewuserReturnUser(data.ids);
    renderMonthOverMonthChart(data.ids);
    renderYearOverYearChart(data.ids);
    renderTopBrowsersChart(data.ids);
    renderTopCountriesChart(data.ids);
  }); */

    dataChart1.set(data1).execute();
    dataChart2.set(data2).execute();
    dataChart4.set(data4).execute();

    renderSessionSource(viewID);
    renderDeviceSession(viewID);
    renderNewuserReturnUser(viewID);
    renderWeekOverWeekChart(viewID);
    renderMonthOverMonthChart(viewID);
    renderTopBrowsersChart(viewID);
    renderTopCountriesChart(viewID);

  dateRangeSelector1.on('change', function(data) {
    dataChart1.set({query: data}).execute();
    dataChart2.set({query: data}).execute();
    dataChart4.set({query: data}).execute();


    // Update the "from" dates text.
    var datefield = document.getElementById('from-dates');
    datefield.innerHTML = data['start-date'] + '&mdash;' + data['end-date'];
  });


  /**
   * Draw the a chart.js line chart with data from the specified view that
   * overlays session data for the current week over session data for the
   * previous week.
   */
   function renderSessionSource(ids){
    query({
      'ids': ids,
      'dimensions': 'ga:source',
      'metrics': 'ga:sessions',
      'sort': '-ga:sessions',
      'max-results': '10',
      'start-date': moment().subtract(30,'days').format('YYYY-MM-DD'),
      'end-date' : moment().format('YYYY-MM-DD')
   
    })
    .then(function(response) {

      var data = [];
      var colors = ['#4D5360','#949FB1','#D4CCC5','#E2EAE9','#F7464A','#7A74BB','#B8E9BB','#0AF229','#0A02FF','#FEEB07'];
      var totalValue = 0;
      response.rows.forEach(function(row,i){
        totalValue += +row[1];
      })
      response.rows.forEach(function(row, i) {
        data.push({
          label: row[0],
          value: Math.round(+row[1]/totalValue*100).toFixed(2),
          color: colors[i]
        });
      });

      new Chart(makeCanvas('chart-container5')).Doughnut(data);
      generateLegend('legend-container5', data);
    });
   }

  function renderNewuserReturnUser(ids){
    query({
      'ids': ids,
      'dimensions': 'ga:userType',
      'metrics': 'ga:sessions',
      'sort': '-ga:sessions',
      'max-results': '5',
      'start-date': moment().subtract(30,'days').format('YYYY-MM-DD'),
      'end-date' : moment().format('YYYY-MM-DD')
    })
    .then(function(response) {

      var data = [];
      var colors = ['#4D5360','#949FB1','#D4CCC5','#E2EAE9','#F7464A'];
      var totalValue = 0;
      response.rows.forEach(function(row,i){
        totalValue += +row[1];
      })
      response.rows.forEach(function(row, i) {
        data.push({
          label: row[0],
          value: Math.round(+row[1]/totalValue*100).toFixed(2),
          color: colors[i]
        });
      });
      
      new Chart(makeCanvas('chart-container4')).Doughnut(data);
      generateLegend('legend-container4', data);
    });
  } 

  function renderDeviceSession(ids){
    query({
      'ids': ids,
      'dimensions': 'ga:deviceCategory',
      'metrics': 'ga:sessions',
      'sort': '-ga:sessions',
      'max-results': '5',
      'start-date': moment().subtract(30,'days').format('YYYY-MM-DD'),
      'end-date' : moment().format('YYYY-MM-DD')
      
    })
    .then(function(response) {

      var data = [];
      var colors = ['#4D5360','#949FB1','#D4CCC5','#E2EAE9','#F7464A','#'];
      var totalValue = 0;
      response.rows.forEach(function(row,i){
        totalValue += +row[1];
      })

      response.rows.forEach(function(row, i) {
        data.push({ 
        value: Math.round(+row[1]/totalValue*100).toFixed(2),
         color: colors[i], 
         label: row[0] 
       });
      });

      new Chart(makeCanvas('chart-container3')).Doughnut(data);
      generateLegend('legend-container3', data);
    });

  }
  function renderWeekOverWeekChart(ids) {

    // Adjust `now` to experiment with different days, for testing only...
    var now = moment(); // .subtract(3, 'day');

    var thisWeek = query({
      'ids': ids,
      'dimensions': 'ga:date,ga:nthDay',
      'metrics': 'ga:sessions',
      'start-date': moment(now).subtract(1, 'day').day(0).format('YYYY-MM-DD'),
      'end-date': moment(now).format('YYYY-MM-DD')
    });

    var lastWeek = query({
      'ids': ids,
      'dimensions': 'ga:date,ga:nthDay',
      'metrics': 'ga:sessions',
      'start-date': moment(now).subtract(1, 'day').day(0).subtract(1, 'week')
          .format('YYYY-MM-DD'),
      'end-date': moment(now).subtract(1, 'day').day(6).subtract(1, 'week')
          .format('YYYY-MM-DD')
    });

    Promise.all([thisWeek, lastWeek]).then(function(results) {

      var data1 = results[0].rows.map(function(row) { return +row[2]; });
      var data2 = results[1].rows.map(function(row) { return +row[2]; });
      var labels = results[1].rows.map(function(row) { return +row[0]; });

      labels = labels.map(function(label) {
        return moment(label, 'YYYYMMDD').format('ddd');
      });

      var data = {
        labels : labels,
        datasets : [
          {
            label: 'Last Week',
            fillColor : 'rgba(220,220,220,0.5)',
            strokeColor : 'rgba(220,220,220,1)',
            pointColor : 'rgba(220,220,220,1)',
            pointStrokeColor : '#fff',
            data : data2
          },
          {
            label: 'This Week',
            fillColor : 'rgba(151,187,205,0.5)',
            strokeColor : 'rgba(151,187,205,1)',
            pointColor : 'rgba(151,187,205,1)',
            pointStrokeColor : '#fff',
            data : data1
          }
        ]
      };

      new Chart(makeCanvas('chart-1-container')).Line(data);
      generateLegend('legend-1-container', data.datasets);
    });
  }


  /**
   * Draw the a chart.js bar chart with data from the specified view that
   * overlays session data for the current year over session data for the
   * previous year, grouped by month.
   */

   // it still be year over year
  function renderMonthOverMonthChart(ids) {

    // Adjust `now` to experiment with different days, for testing only...
    var now = moment(); // .subtract(3, 'day');

    var thisYear = query({
      'ids': ids,
      'dimensions': 'ga:month,ga:nthMonth',
      'metrics': 'ga:users',
      'start-date': moment(now).date(1).month(0).format('YYYY-MM-DD'),
      'end-date': moment(now).format('YYYY-MM-DD')
    });

    var lastYear = query({
      'ids': ids,
      'dimensions': 'ga:month,ga:nthMonth',
      'metrics': 'ga:users',
      'start-date': moment(now).subtract(1, 'year').date(1).month(0)
          .format('YYYY-MM-DD'),
      'end-date': moment(now).date(1).month(0).subtract(1, 'day')
          .format('YYYY-MM-DD')
    });

    Promise.all([thisYear, lastYear]).then(function(results) {
      var data1 = results[0].rows.map(function(row) { return +row[2]; });
      var data2 = results[1].rows.map(function(row) { return +row[2]; });
      var labels = ['Jan','Feb','Mar','Apr','May','Jun',
                    'Jul','Aug','Sep','Oct','Nov','Dec'];

      // Ensure the data arrays are at least as long as the labels array.
      // Chart.js bar charts don't (yet) accept sparse datasets.
      for (var i = 0, len = labels.length; i < len; i++) {
        if (data1[i] === undefined) data1[i] = null;
        if (data2[i] === undefined) data2[i] = null;
      }

      var data = {
        labels : labels,
        datasets : [
          {
            label: 'Last Year',
            fillColor : 'rgba(220,220,220,0.5)',
            strokeColor : 'rgba(220,220,220,1)',
            data : data2
          },
          {
            label: 'This Year',
            fillColor : 'rgba(151,187,205,0.5)',
            strokeColor : 'rgba(151,187,205,1)',
            data : data1
          }
        ]
      };

      new Chart(makeCanvas('chart-2-container')).Bar(data);
      generateLegend('legend-2-container', data.datasets);
    })
    .catch(function(err) {
      console.error(err.stack);
    });
  }


  /**
   * Draw the a chart.js doughnut chart with data from the specified view that
   * show the top 5 browsers over the past seven days.
   */
  function renderTopBrowsersChart(ids) {

    query({
      'ids': ids,
      'dimensions': 'ga:browser',
      'metrics': 'ga:sessions',
      'sort': '-ga:sessions',
      'max-results': '5',
      'start-date': moment().subtract(30,'days').format('YYYY-MM-DD'),
      'end-date' : moment().format('YYYY-MM-DD')
    

    })
    .then(function(response) {

      var data = [];
      var colors = ['#4D5360','#949FB1','#D4CCC5','#E2EAE9','#F7464A'];
      var totalValue=0;
      response.rows.forEach(function(row,i){
        totalValue += +row[1];
      })
      response.rows.forEach(function(row, i) {
        data.push({ 
          value: Math.round(+row[1]/totalValue*100).toFixed(2), 
          color: colors[i], 
          label: row[0] 
        });
      });

      new Chart(makeCanvas('chart-3-container')).Doughnut(data);
      generateLegend('legend-3-container', data);
    });
  }


  /**
   * Draw the a chart.js doughnut chart with data from the specified view that
   * compares sessions from mobile, desktop, and tablet over the past seven
   * days.
   */
  function renderTopCountriesChart(ids) {
    query({
      'ids': ids,
      'dimensions': 'ga:country',
      'metrics': 'ga:sessions',
      'sort': '-ga:sessions',
      'max-results': '5',
      'start-date': moment().subtract(30,'days').format('YYYY-MM-DD'),
      'end-date' : moment().format('YYYY-MM-DD')
 
    })
    .then(function(response) {

      var data = [];
      var colors = ['#4D5360','#949FB1','#D4CCC5','#E2EAE9','#F7464A'];
      var totalValue=0;
      response.rows.forEach(function(row,i){
        totalValue += +row[1];
      })
      response.rows.forEach(function(row, i) {
        data.push({
          label: row[0],
          value: Math.round(+row[1]/totalValue*100).toFixed(2),
          color: colors[i]
        });
      });

      

      new Chart(makeCanvas('chart-4-container')).Doughnut(data);
      generateLegend('legend-4-container', data);
    });
  }


  /**
   * Extend the Embed APIs `gapi.analytics.report.Data` component to
   * return a promise the is fulfilled with the value returned by the API.
   * @param {Object} params The request parameters.
   * @return {Promise} A promise.
   */
  function query(params) {
    return new Promise(function(resolve, reject) {
      var data = new gapi.analytics.report.Data({query: params});
      data.once('success', function(response) { resolve(response); })
          .once('error', function(response) { reject(response); })
          .execute();
    });
  }


  /**
   * Create a new canvas inside the specified element. Set it to be the width
   * and height of its container.
   * @param {string} id The id attribute of the element to host the canvas.
   * @return {RenderingContext} The 2D canvas context.
   */
  function makeCanvas(id) {
    var container = document.getElementById(id);
    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');

    container.innerHTML = '';
    canvas.width = container.offsetWidth;
    canvas.height = container.offsetHeight;
    container.appendChild(canvas);

    return ctx;
  }


  /**
   * Create a visual legend inside the specified element based off of a
   * Chart.js dataset.
   * @param {string} id The id attribute of the element to host the legend.
   * @param {Array.<Object>} items A list of labels and colors for the legend.
   */
  function generateLegend(id, items) {
    var legend = document.getElementById(id);
    legend.innerHTML = items.map(function(item) {
      var color = item.color || item.fillColor;
      var label = item.label;
      return '<li><i style="background:' + color + '"></i>' + label + '</li>';
    }).join('');
  }


  // Set some global Chart.js defaults.
  Chart.defaults.global.animationSteps = 60;
  Chart.defaults.global.animationEasing = 'easeInOutQuart';
  Chart.defaults.global.responsive = true;
  Chart.defaults.global.maintainAspectRatio = false;

});
</script>

    <!--   Core JS Files   -->
    <script src="/js/jquery-1.10.2.js" type="text/javascript"></script>
  <script src="/js/bootstrap.min.js" type="text/javascript"></script>

  <!--  Checkbox, Radio & Switch Plugins -->
  <script src="/js/bootstrap-checkbox-radio-switch.js"></script>

  <!--  Charts Plugin -->
  <script src="/js/chartist.min.js"></script>

    <!--  Notifications Plugin    -->
    <script src="/js/bootstrap-notify.js"></script>

    <!--  Google Maps Plugin    -->
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>

    <!-- Light Bootstrap Table Core javascript and methods for Demo purpose -->
  <script src="/js/light-bootstrap-dashboard.js"></script>

  <script src="https://apis.google.com/js/client:platform.js"></script>

  <!-- Light Bootstrap Table DEMO methods, don't include it in your project! -->
  <!--<script src="/js/demo.js"></script> 

  <script type="text/javascript">
      $(document).ready(function(){

          demo.initChartist();

          $.notify({
              icon: '',
              message: "Welcome to <b>Lisaguru Dashboard</b>"

            },{
                type: 'info',
                timer: 4000
            });

      });
  </script> -->

</html>
